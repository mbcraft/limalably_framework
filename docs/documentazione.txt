### Documentazione

## Comandi disponibili nel framework

Il framework mette a disposizione due comandi :

- lymz_framework/bin/run_framework_tests.sh    : esegue tutti gli unit test del framework, attualmente 100% OK sia su linux che su windows
- lymz_framework/bin/create_project.sh         : prepara una cartella con i file principali del progetto

## Percorso del framework

Il percorso del framework va impostato nel file init.php che si trova nella root del progetto. Attualmente sono presenti alcuni esempi e non è presente un concetto di versione, 
ma non è detto che questo non possa cambiare in futuro.

## Configurazione del framework

Il framework utilizza per tutti i suoi default un file di configurazione salvato all'interno del progetto in una cartella speciale e teoricamente quel file non sarebbe da modificare perchè rappresentano dei default di cui il framework ha bisogno nel caso in cui non si faccia l'override dei valori nel file di configurazione del progetto.

I file di configurazione sono suddivisi e caricati in base all'hostname, quindi nella cartella "config/hostnames/" troviamo l'elenco degli hostname su cui dovrà girare il progetto.
Ogni nome di cartella dovrà quindi essere uguale al nome dell'hostname. All'interno di ogni cartella hostname andremo a inserire il file di configurazione del progetto, in formato php o json (o anche entrambi). Il file php dovrà ritornare un array, mentre il json è già nel "formato corretto". Tutto quello che è configurato dal framework può essere modificato.

Nella cartella di config chiamata "mode" viene posizionato dal framework un file che serve ad esso per sapere la modalità di esecuzione corrente.
Nella cartella di config chiamata "internal" troviamo invece il file di configurazione interno del framework che non andrebbe modificato se non per valide ragioni.

Viene di seguito riportata una spiegazione sommaria del file di configurazione del framework. E' una lista abbastanza lunga.

Tutta la configurazione di default del framework è inserita nella chiave "defaults".

La prima parte di configurazione del framework è la sezione "execution_mode". In questa sezione, per ogni execution mode sono presenti le chiavi per configurare i comportamenti del framework. Nello specifico :

		"logging": {
		    "type": "together-file",			// specifica il tipo di log. Sono presenti "together-file","distinct-file","db" e "output"
		    "min_level": "debug",				// specifica il livello minimo di log. E' possibile specificare "debug","warning","info","error","fatal"
		    "log_mode": "normal"				// specifica la modalità di log che si aggancia al tipo. Per i file è possibile indicare "normal","reset" oppure "rolling"
		    									// è possibile specificare per ogni type delle chiavi con all'interno ulteriori parametri. Nello specifico per i file è possibile specificare : "log_mode", "log_folder" ,"log_format", "date_format", "max_mb".
	    										// per il tipo "db" è possibile specificare : "log_mode", "connection_name", "max_records", "table_name".
	    										// il logger "db" crea automaticamente la tabella coi campi di cui ha bisogno per effettuare il log (al momento è supportato solo MySql).
		},
		"urlmap": {
		    "private_routes_visible": false 	// imposta la visibilità delle route private, true o false
		},
		"template": {
		    "auto_reload": true 				//imposta l'auto-reloading dei template, true o false
		},
		"request" : {
		    "route_handler_class" : "LMaintenanceRouteExecutor"		// se specificata sovrascrive quella di default
		},
		"misc" : {
		    "errors" : {
		        "log" : false, 										// specifica se vanno loggati gli errori
		        "display" : true 									// specifica se vanno visualizzati gli errori
		    },
            "trace_enabled" : false,								// chiave non obbligatoria, se non presente vale true
            "debug_enabled" : false 								// chiave non obbligatoria, se non presente vale true
		}

La sezione successiva è "urlmap". Contiene le seguenti chiavi :

        "static_routes_folder" : "urlmap/public/static/",			// cartella in cui si trovano le urlmap statiche
        "alias_db_routes_folder" : "urlmap/public/alias_db/",		// cartella in cui si trovano le urlmap alias
        "private_routes_folder" : "urlmap/private/",				// cartella in cui si trovano le urlmap private
        "search_order": "alias_db,static",							// ordine di ricerca delle urlmap
        "special_folder_route": "_folder",							// nome della urlmap che mappa la cartella (url che finisce con /)
        "special_inherited_route": "_default",						// nome della urlmap che si utilizza per gestire l'ereditarietà
        "special_truncate_route": "_stop",							// nome della urlmap che si utilizza per gestire il troncamento dell'url
        "ignore_missing_extends": false,							// flag per segnalare se lanciare un errore quando mancano degli extends nella urlmap
        "ignore_missing_imports": false,							// flag per segnalare se lanciare un errore quanto mancano degli import nella urlmap
        "validation_driver_class": "LRespectValidationDriver"		// classe da usare come driver per le validazioni usate dentro la urlmap

La sezione successiva è "template". Contiene le seguenti chiavi :

        "source_factory_class": "LTwigTemplateSourceFactory",		// classe factory per la gestione dei template. Attualmente c'è il supporto per twig
        "root_folder": "template/",									// cartella root dei template
        "cache_folder": "temp/cache/template/",						// cartella cache dei template
        "strict_variables": false,									// utilizzo delle variabili del template in modalità strict
        "autoescape" : "name",										// autoescape
        "import_into_variables": ["env", "env_string" , "output_string" ,"input", "input_string","session", "session_string","capture", "capture_string","parameters", "parameters_string" ,"urlmap", "urlmap_string","i18n","flags"],	// elenco dei gruppi di chiavi da importare dentro le variabili del template. Sono elencate tutte.
        "extension_search_list" : [".html",".xhtml",".json",".twig"]	// lista delle estensioni valide per i template. Va in ricerca seguendo l'elenco

La sezione successiva è "logging". Specifica i valori di default per ogni tipologia di logging. Viene riportato uno stralcio del file di configurazione :

        "distinct-file": {
            "date_format": "d/m/Y H:i:s",
            "log_format": "[ {date} - {level_string} - {code} ] : {message}\n",
            "log_mode": "normal",
            "max_mb": 10,
            "log_folder": "logs/",
            "min_level": "debug"
        },
        "together-file": {
            "date_format": "d/m/Y H:i:s",
            "log_format": "[ {date} - {level_string} - {code} ] : {message}\n",
            "log_mode": "rolling",
            "max_mb": 10,
            "log_folder": "logs/",
            "min_level": "debug"
        },
        "db": {
            "log_mode": "normal",
            "connection_name": "default",
            "max_records": 1000000,
            "table_name": "logs",
            "min_level": "debug"
        },
        "output": {
            "min_level": "debug"
        }

La sezione successiva è "treemap". Al momento ha un'unica chiave :

        "false_values": ["false", "null", "0", "no", 0, false, null]	//elenco dei valori considerati "false" all'interno delle treemap.

La sezione successiva è "classloader". Sono presenti le seguenti chiavi :

        "code_file_ends_with": [".class.php", ".interface.php", ".trait.php"],			//elenco dei suffissi di file di codice ritenuti validi
        "framework_folder_list": ["lib/"],												//elenco delle cartelle del framework in cui cercare delle classi
        "project_folder_list": ["lib/", "urlmap/handlers/"],							//elenco delle cartelle del progetto in cui cercare delle classi
        "map_cache_file_path": "temp/cache/classloader/map/classloader_map_cache.php",  //percorso del file di cache della mappa delle classi
        "class_cache_folder": "temp/cache/classloader/classes/",						//percorso della cartella che contiene la cache delle classi
        "cache_commented_call_list": ["LLog::debug", "LLog::info"],						//elenco delle chiamate da commentare all'interno dei file nella cache
        "skip_cache_route_list": [],													//elenco delle route che non utilizzano le classi nella cache
        "skip_cache_query_parameter": null 												//parametro nella query per non utilizzare le classi nella cache

La sezione successiva è "request". Sono presenti le seguenti chiavi :

        "input_source_list": ["files", "post", "get"],						// elenco degli array nel preciso ordine in cui vengono letti dei parametri in input
        "route_handler_class" : "LDefaultRouteExecutor" 					// classe che gestisce le route di default

La sezione successiva è "exec". E' disponibile la seguente chiave :

        "method_parameter_search_list": ["meta", "capture", "rel_input", "input", "rel_session", "session", "rel_output", "output", "default_value"]
        									// specifica come viene cercato un parametro per agganciarlo al metodo che viene eseguito, in particolare l'ordine degli elementi in cui viene cercato. "meta" rappresenta le variabili speciali, le altre sono poi "contenitori" in cui cercare la chiave che fa match.

La sezione successiva è "format". Sono disponibili le seguenti chiavi :

        "html": {
            "error_templates_folder": "errors/html/"			// percorso della cartella con i template per gli errori in formato html.
        },
        "json": {
            "encode_options": ["THROW_ON_ERROR"],				// opzioni di encoding dei json
            "error_templates_folder": "errors/json/"			// percorso dei template di errore per gli output json
        },
        "default_error_format" : "html"							// formato per gli errori di default

La sezione "session" al momento è vuota.

La sezione successiva è "misc". Sono disponibili le seguenti chiavi :

        "errors" : {								// sottosezione relativa agli errori
            "log" : true,							// flag per abilitare/disabilitare globalmente il log
            "display" : false,						// flag per abilitare/disabilitare globalmente il display
            "continue_on_errors" : false,			// flag per cercare di far continuare l'esecuzione in caso di errori
            "reporting" : {							// sezione relativa al reporting, per ogni tipologia è presente un valore 
            										// true o false per abilitare/disabilitare il reporting. Di default sono tutti a true.
                "error" : true,
                "warning" : true,
                "parse" : true,
                "notice" : true,
                "core_error" : true,
                "core_warning" : true,
                "compile_error" : true,
                "compile_warning" : true,
                "user_error" : true,
                "user_warning" : true,
                "user_notice" : true,
                "recoverable_error" : true
            }
        },
        "trace_enabled" : true,						// flag per abilitare/disabilitare il trace a livello globale
        "debug_enabled" : true,						// flag per abilitare/disabilitare il debug a livello globale
        "introspection_enabled" : true,				// flag per abilitare/disabilitare l'introspezione
        "proc_folder": "proc/",						// cartella in cui cercare le 'procedure'
        "proc_extension": ".proc.php",				// estensione usata dalle procedure
        "data_folder": "data/",						// percorso della cartella dati
        "autofix_folder_permissions" : true,		// fix automatico dei permessi delle folder
        "wwwroot_folder" : "wwwroot/",				// percorso della cartella root per apache (wwwroot)
        "build" : 0    								// valore della build

La sezione successiva è "i18n". Sono disponibili le seguenti chiavi :

        "translations_root_folder" : "i18n/",		// percorso della cartella root dei file con le traduzioni
        "capture_lang_variable" : "lang",			// variabile che salva la lingua corrente
        "session_lang_variable_path" : "/lang",		// percorso nella sessione in cui salvare la lingua corrente
        "cookie_lang_variable" : "lang",			// variabile del cookie in cui salvare la lingua corrente
        "default_language" : "it",					// lingua di default
        "cache_folder" : "temp/cache/i18n/",		// percorso delle cache per i file di lingua
        "override_default_lang" : true     			// flag per abilitare l'override della lingua di default

Il file di configurazione di default non ha altre sezioni. Un file di progetto potrebbe averne molte meno e sovrascrivere solo le poche cose che necessitano di essere personalizzate.

## Comandi di progetto disponibili

La versione corrente del framework mette a disposizione i seguenti comandi di progetto :

- my_project/bin/generate_data_object.sh		: genera automaticamente i data object andando a leggere le tabelle dal database di default
- my_project/bin/get_execution_mode.sh			: ritorna la modalità di esecuzione corrente
- my_project/bin/url_alias_db_add.sh					: aggiunge alle url alias una entry nel db
- my_project/bin/url_alias_db_list.sh				: visualizza l'elenco delle url alias nel db
- my_project/bin/url_alias_db_remove.sh				: rimuove una url alias dal db
- my_project/bin/run_tests.sh					: esegue gli unit test (normale)
- my_project/bin/run_tests_fast.sh				: esegue gli unit test (veloci)
- my_project/bin/set_execution_mode.sh 			: imposta la modalità di esecuzione

## Supporto agli unit test

Il framework offre supporto agli unit test fornendo delle classi comode che possono essere utilizzate senza preoccupazioni e che offrono tutto il necessario per fare degli unit test. 
Per il programmatore è sufficiente inserire le classi dentro la cartella "my_project/tests/" per quanto riguarda tutti i test che si andranno ad accumulare e mettere nella cartella "my_project/tests_fast/" quelli che saranno eseguiti più spesso e che hanno un'esecuzione più rapida (in sostanza quelli di quello che si sta sviluppando).
Le classi con gli unit test possono essere organizzate senza problemi in sottocartelle, l'unico requisito è che ereditino da LTestCase e che finiscano col suffisso "*Test.class.php". Si andranno poi a utilizzare i metodi messi a disposizione dal LTestCase (ereditati da LAssert) per fare gli unit test.
La classe LTestCase mette quindi a disposizione i seguenti metodi :

- assertFalse($value,$message)
- assertTrue($value,$message)
- assertNotSame($actual,$expected,$message)
- assertSame($actual,$expected,$message)
- assertLessThanOrEqual($actual,$max,$message)
- assertLessThan($actual,$max,$message)
- assertGreaterThanOrEqual($actual,$min,$message)
- assertGreaterThan($actual,$min,$message)
- assertNotEqual($actual,$expected,$message)
- assertEqual($actual,$expected,$message)
- assertNull($actual,$message)
- assertNotNull($actual,$message)
- fail($message)

## Modalità di esecuzione

Il framework può funzionare con diverse modalità di esecuzione, e ogni modalità praticamente offre una serie di comportamenti che dipendono in sostanza dalla modalità stessa e che rappresenta una diversa fase dello sviluppo. Le modalità disponibili sono le seguenti :

- framework_development		: da utilizzare quando si sta sviluppando il framework lym, non ha bisogno di un progetto. Gli errori vengono solo mostrati all'utente e non loggati.

- development 				: da utilizzare quando si è in fase di sviluppo del progetto, gli errori presentati all'utente e vengono salvati in file di log distinti e vengono loggati i messaggi di livello debug. Le routes private sono visibili, i template si auto-ricaricano.

- testing					: gli errori vengono presentati all'utente e loggati su file come per la modalità development ma vengono loggati solo gli statement di livello error. Le routes private non sono visibili e i template non si auto-ricaricano. Trace e debug sono disabilitati. 

- production				: gli errori non vengono presentati all'utente ma inseriti solo in file di log. All'utente viene mostrata una generica schermata di errore. Le routes private non sono visibili, i template non si auto-ricaricano e trace e debug sono disabilitati.

- maintenance				: questa modalità indipendentemente dall'url mostra una schermata fissa e va utilizzata in fase di manutenzione per evitare che gli utenti possano compiere azioni durante eventuali aggiornamenti del progetto.

I comportamenti delle modalità di esecuzione possono eventualmente essere modificati dalla configurazione.

## Supporto al logging

Il framework mette a disposizione la classe LLog per poter effettuare del logging in tutta comodità. Sono presenti i metodi statici :

- isDebug()
- debug($message)
- isInfo()
- info($message)
- isWarning()
- warning($message)
- isError()
- error($message,$code = '')
- exception(\Exception $ex)
- isFatal()
- fatal($message)
- close()

Il log può poi essere redirezionato nelle varie modalità disponibili (vedi sezione configurazione).
La cartella dei log può essere anche esterna al progetto, dipende se comincia con '/' o con la lettera di un drive 'C:', 'D:', ecc.

## Supporto alla localizzazione

Nel framework è disponibile il supporto alla localizzazione. La lingua corrente è un'impostazione che viene rilevata automaticamente in base alle preferenze dell'utente. I file di localizzazione vanno salvati nella cartella i18n/.
All'interno di tale cartella vanno inserite delle sottocartelle delle lingue col loro codice (es sottocartella 'it', 'en'), ecc.
All'interno della cartella della lingua è possibile inserire i file della localizzazione. Sono supportati vari formati, tra cui file xml e file .ini.
I file xml sono utilizzati per traduzioni multi riga, mentre i file .ini per traduzioni di singola riga. In entrambi i file è possibile usare chiavi in un formato con percorsi che contengono punti come separatori, es 'sample.template1'. All'interno dei template è possibile avere anche dei parametri (le stringhe vengono elaborate come template) in modo da avere traduzioni con all'interno informazioni che provengono dalla business logic.

//Per utilizzare le traduzioni all'interno della business logic è possibile utilizzare la classe LI18nUtils.
//Questa classe mette a disposizioni vari metodi statici che possono essere chiamati :
//
//- getAvailableLanguages()
//- getCurrentLang()
//- getCurrentLangData()
//

E' possibile accedere alle traduzioni utilizzando la chiave i18n all'interno dei template utilizzando il formato classico del template, es : {{ i18n.home.riconoscimenti.title }}.
In questo esempio si prendere la chiave 'home.riconoscimenti.title'.

## Urlmap in formato json con molteplici funzionalità

Le urlmap sono file che mappano uno specifico percorso nel sito o nel gestionale a una specifica esecuzione.
In particolare nelle urlmap è possibile specificare nelle chiave 

"conditions" e anche "!conditions" 

delle condizioni e delle condizioni negate che vengono valutate prima di consentire l'accesso. Queste condizioni non tengono conto dei parametri di input e sessione
che vengono valutati in sezioni separate.

Una volta eseguite le conditions viene valutato

"load" 

che serve per caricare nei parametri in input dei dati arbitrari.

E' poi la volta di 

"capture"

che permette di catturare dall'url eventuali variabili.

E' poi la volta di

"session" e "input"

che eseguono controlli sulla sessione e sull'input prima di far proseguire l'esecuzione.

troviamo poi la sezione

"before_exec"

che viene eseguita prima dell'exec vero e proprio.

Poi abbiamo

"dynamic_exec"

che serve per popolare l'exec dinamicamente, e poi

"exec"

per l'esecuzione vera e propria, poi

"after_exec" 

per il dopo esecuzione.

Poi abbiamo 

"dynamic_template"

che serve per popolare la sezione dei template in modo dinamico.

"http_redirect" e "http_error" che servono per effettuare redirect o forzare un errore http.

Poi c'è la sezione

"template"

per il rendering del template.

Infine c'è il parametro 

"format"

che serve per definire il formato della risposta, e tipicamente può assumere i valori : "html", "json", "xml" o "data".

Tipicamente nelle varie chiamate, quando si desidera importare dati si usa il prefisso '=', quando si desidera utilizzare il risultato di un'altra route interna
si usa il prefisso '->', quando si vuole chiamare un metodo non statico si usa "MyCallClass#myCallMethod", mentre invece quando il metodo è statico si usa il
separatore '::', ad esempio "MyCallClass::myCallStaticMethod". Eventualmente se non si usa nessuno dei formalismi precedentemente descritti si possono anche eseguire
delle proc, ovvero delle procedure php che sono dei file nella cartella (tipicamente) "proc". Quindi per chiamare una proc si mette il percorso, ad esempio "myProcedureFolder/myProcFile". Quando si eseguono delle proc gli eventuali parametri come i dati della sessione o dell'input saranno all'interno di variabili ben definite, di nome "parameters", "input", "rel_input","session", "rel_session", "capture" e "context_path". Questo perchè non ci sono metodi ma si tratta di file php grezzi. 

## Formato dei dati

Sono disponibili per i dati 3 formati diversi di file che hanno caratteristiche differenti :

- file .ini : utilizzati per valori brevi che non comprendono newline
- file .json : utilizzati per valori molto strutturati
- file .xml : utilizzati per valori lunghi e che comprendono anche caratteri newline

Nei file .ini si utilizzano percorsi separati da '.', si mette poi l'uguale e di seguito fino alla fine della riga il valore.
Es:

mio.percorso.particolare = MioValore

Nei file json si possono mettere chiavi annidate e alla fine vengono considerati solo i valori terminali.
Nei file xml si utilizza una particolare struttura composta come l'esempio qui di seguito :

<?xml version="1.0" encoding="UTF-8"?>
<data>
    <entry path="sample.string2">
        Lorem ipsum dolor sit amet
    </entry>
    <entry path="sample.template2">
        Ciao carissimo {{ name }}. Posso offrirti un the coi biscotti?
    </entry>
</data>

Anche qui i percorsi sono separati col '.' per non creare ambiguità col carattere di fine tag, ed è inoltre possibile inserire anche variabili all'interno dei valori trattandoli come se fossero dei template. Questo è possibile farlo con tutti i formati ma l'xml è sicuramente il più adatto per questo.
Il tag root è 'data' e contiene n tag 'entry'. L'attributo path stabilisce il percorso in cui il dato è salvato all'interno dell'albero, mentre il contenuto del tag racchiude il valore.
Tutti i valori dei file dati sono quindi salvati in una struttura chiamata TreeMap e gestiti da un'apposita classe.


